// python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. price.proto


syntax = "proto3";

option java_multiple_files = true;

package price;

// The price service definition.
service Price {
  // A simple RPC.
  //
  // Sends a price for a utility, tariff, type, duration (start, end), and window
  // An empty PricePoint is returned if there are no prices for the given request
  rpc GetPrice (PriceRequest) returns (stream PricePoint) {}
  // Sends all available tariffs and utilities
  rpc GetAllTariffsAndUtilities (Empty) returns (AllTariffUtilityReply) {}
  // Sends a tariff and utility for the specified building name
  rpc GetTariffAndUtility (BuildingRequest) returns (TariffUtilityReply) {}
  // Sends demand response forecast for the next 5 days (only PG&E PDP and SCE CPP)
  rpc GetDemandResponseForecast (DemandResponseRequest) returns (DemandResponseReply) {}
  // Sends confirmed demand response days for today and tomorrow (only PG&E PDP and SCE CPP)
  rpc GetDemandResponseConfirmed (DemandResponseRequest) returns (DemandResponseReply) {}

}

// PricePoints are represented as a float per unit (e.g., 0.14 $/kWh) starting at a given time
message PricePoint {
  int64 time = 1;
  double price = 2;
  string unit = 3;
  string window = 4;
}

// An empty message
message Empty {

}

//The request message containg the requested utility
message DemandResponseRequest {
  string utility = 1;
}


message DemandResponseReply {
  repeated DemandResponsePoint statuses = 1;
}

message DemandResponsePoint {
  int64 time = 1;
  int64 status = 2; // UNLIKELY = 0, POSSIBLE = 1, LIKELY = 2, CONFIRMED = 3
}
//The request message containing the requested building name
message BuildingRequest {
  string building = 1;
}

// The request message containing the requested pricing information.
message PriceRequest {
  // The name of the electric utility (e.g., PGE or SCE)
  string utility = 1;

  // The utility tariff
  // PGE {PGEFLAT06,PGEA01,PGEA06,PGEA10,PGEE19,PGEE20}
  // SCE {SCE08B,SCETGS3}
  string tariff = 2;

  // The price type (e.g., ENERGY or DEMAND)
  string price_type = 3;

  // The start time in Unixnanoseconds
  int64 start = 4;

  // The end time in Unixnanoseconds
  int64 end = 5;

  // The frequency/duration window (e.g., 10s, 15m, 1h)
  // Supported units are: h,m,s
  // max is 1 hour (1h, 60m, 3600s)
  string window = 6;
}

// The response message containing all tariffs and utilities
message AllTariffUtilityReply {
  repeated TariffUtilityReply tariffs_utilities = 1;
}

//The response message containing the tariff and utility
message TariffUtilityReply {
  string utility = 1;
  string tariff = 2;
}
